{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactList/transitions/pop.module.css","components/ContactForm/ContactForm.module.css","components/Notification/Notification.module.css","components/App/App.module.css","components/Notification/transitions/slide.module.css","redux/contacts/contactsReducers.js","redux/contacts/contactsTypes.js","redux/rootReducer.js","redux/store.js","redux/contacts/contactsActions.js","components/ContactList/ContactList.jsx","components/ContactList/ContactListContainer.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/Notification/Notification.jsx","components/Logo/Logo.jsx","components/App/App.jsx","components/App/AppContainer.js","index.js"],"names":["module","exports","contactsReducer","createReducer","items","filtratedItems","contactExist","state","action","every","item","name","toLocaleLowerCase","payload","filter","id","toLowerCase","includes","rootReducer","combineReducers","contacts","contactsReducers","store","configureStore","reducer","addAction","createAction","deleteAction","getItemsFromLocalStorage","filtrateContacts","ContactList","onDelete","length","TransitionGroup","component","className","styles","list","map","number","CSSTransition","key","timeout","classNames","popTransition","AsYouType","input","button","type","onClick","connect","dispatch","contactsActions","ContactForm","handleChange","target","setState","value","handleSubmit","e","preventDefault","props","onAddItem","uuid","clearState","this","onSubmit","maxLength","placeholder","onChange","required","Component","Filter","onSetFilter","loginInputId","Notification","notificationBox","Logo","in","appear","App","setFilter","onFiltrate","onGetItemsFromStorage","persistedContacts","localStorage","getItem","JSON","parse","prevProps","prevState","setItem","stringify","container","slideTransition","unmountOnExit","onEntered","setTimeout","ContactListContainer","ReactDOM","render","AppContainer","document","getElementById"],"mappings":"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","file":"static/js/main.0d2abd75.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactList_button__2ZHKf\",\"list\":\"ContactList_list__3K6XL\",\"item\":\"ContactList_item__3HPWE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__3h_Xn\",\"enterActive\":\"pop_enterActive__2yn3z\",\"exit\":\"pop_exit__ZqlJp\",\"exitActive\":\"pop_exitActive__JGINI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactForm_button__2xL35\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notificationBox\":\"Notification_notificationBox__Gwf0i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__20mAs\",\"title\":\"App_title__3jH43\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__2AqNz\",\"enterActive\":\"slide_enterActive__3cq4z\",\"exit\":\"slide_exit__Rd7je\",\"exitActive\":\"slide_exitActive__3ijfT\"};","import { createReducer } from '@reduxjs/toolkit';\nimport * as types from './contactsTypes';\n\nconst initialState = {\n  items: [],\n  filtratedItems: [],\n  contactExist: false,\n};\n\nconst contactsReducer = createReducer(initialState, {\n  [types.ADD_CONTACT]: (state, action) => {\n    if (\n      state.items.every(\n        item =>\n          item.name.toLocaleLowerCase() !==\n          action.payload.item.name.toLocaleLowerCase(),\n      )\n    ) {\n      return {\n        ...state,\n        contactExist: false,\n        items: [...state.items, action.payload.item],\n      };\n    }\n    return { ...state, contactExist: true };\n  },\n  [types.DELETE_CONTACT]: (state, action) => ({\n    ...state,\n    items: state.items.filter(item => item.id !== action.payload.id),\n  }),\n  [types.FILTRATE_CONTACTS]: (state, action) => ({\n    ...state,\n    filtratedItems: state.items.filter(item =>\n      item.name.toLowerCase().includes(action.payload.filter.toLowerCase()),\n    ),\n  }),\n  [types.GET_ITEMS]: (state, action) => ({\n    ...state,\n    items: [...action.payload.items],\n  }),\n});\n\nexport default contactsReducer;\n","export const ADD_CONTACT = 'contacts/ADD_CONTACT';\nexport const DELETE_CONTACT = 'contacts/DELETE_CONTACT';\nexport const FILTRATE_CONTACTS = 'contacts/FILTRATE_CONTACTS';\nexport const GET_ITEMS = 'contacts/GET_ITEMS';\n","import { combineReducers } from 'redux';\nimport contactsReducers from './contacts/contactsReducers';\n\nconst rootReducer = combineReducers({\n  contacts: contactsReducers,\n});\n\nexport default rootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './rootReducer';\n\nconst store = configureStore({ reducer: rootReducer });\n\nexport default store;\n","import { createAction } from '@reduxjs/toolkit';\nimport * as types from './contactsTypes';\n\nexport const addAction = createAction(types.ADD_CONTACT);\n\nexport const deleteAction = createAction(types.DELETE_CONTACT);\n\nexport const getItemsFromLocalStorage = createAction(types.GET_ITEMS);\n\nexport const filtrateContacts = createAction(types.FILTRATE_CONTACTS);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { AsYouType } from 'libphonenumber-js';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport styles from './ContactList.module.css';\nimport popTransition from './transitions/pop.module.css';\n\nconst ContactList = ({ filtratedItems: items, onDelete }) => {\n  return items.length ? (\n    <TransitionGroup component=\"ul\" className={styles.list}>\n      {items.map(({ name, id, number }) => {\n        return (\n          <CSSTransition key={id} timeout={250} classNames={popTransition}>\n            <li className={styles.item}>\n              <span>\n                {name} {new AsYouType('US').input(number)}\n              </span>\n              <button\n                className={styles.button}\n                type=\"button\"\n                onClick={() => onDelete(id)}\n              >\n                &#10006;\n              </button>\n            </li>\n          </CSSTransition>\n        );\n      })}\n    </TransitionGroup>\n  ) : null;\n};\n\nContactList.propTypes = {\n  filtratedItems: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import { connect } from 'react-redux';\nimport * as contactsActions from '../../redux/contacts/contactsActions';\nimport ContactList from './ContactList';\n\nconst mapStateToProps = store => ({\n  filtratedItems: store.contacts.filtratedItems,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDelete: id => dispatch(contactsActions.deleteAction({ id })),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport uuid from 'uuid';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\nimport * as contactsActions from '../../redux/contacts/contactsActions';\n\nclass ContactForm extends Component {\n  static propTypes = {\n    onAddItem: PropTypes.func.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = ({ target }) => {\n    this.setState({\n      [target.name]: target.value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    if (this.state.name && this.state.number) {\n      this.props.onAddItem({ ...this.state, id: uuid() });\n    }\n    this.clearState();\n  };\n\n  clearState = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          maxLength=\"36\"\n          placeholder=\"Enter your name...\"\n          onChange={this.handleChange}\n          value={name}\n          required\n        />\n        <input\n          maxLength=\"10\"\n          name=\"number\"\n          type=\"number\"\n          placeholder=\"Enter your number...\"\n          onChange={this.handleChange}\n          value={number}\n          required\n        />\n        <button type=\"submit\" className={styles.button}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onAddItem: item => dispatch(contactsActions.addAction({ item })),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport uuid from 'uuid';\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ onSetFilter }) => {\n  const loginInputId = uuid();\n\n  return (\n    <form>\n      <h3>Find contact by name</h3>\n      <input\n        onChange={onSetFilter}\n        type=\"text\"\n        name=\"filter\"\n        id={loginInputId}\n        placeholder=\"Enter a name to search...\"\n      />\n    </form>\n  );\n};\n\nFilter.propTypes = {\n  onSetFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React from 'react';\nimport styles from './Notification.module.css';\n\nconst Notification = () => {\n  return <div className={styles.notificationBox}>Contact already exist!</div>;\n};\n\nexport default Notification;\n","import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport './transitions/logo.css';\n\nconst Logo = () => {\n  return (\n    <CSSTransition in timeout={600} classNames=\"Logo\" appear>\n      <h1>Phonebook</h1>\n    </CSSTransition>\n  );\n};\n\nexport default Logo;\n","import React, { Component } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport ContactListContainer from '../ContactList/ContactListContainer';\nimport ContactForm from '../ContactForm/ContactForm';\nimport Filter from '../Filter/Filter';\nimport Notification from '../Notification/Notification';\nimport styles from './App.module.css';\nimport slideTransition from '../Notification/transitions/slide.module.css';\nimport Logo from '../Logo/Logo';\n\nclass App extends Component {\n  state = {\n    filter: '',\n  };\n\n  static propTypes = {\n    onFiltrate: PropTypes.func.isRequired,\n    onGetItemsFromStorage: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n      }),\n    ).isRequired,\n    contactExist: PropTypes.bool.isRequired,\n  };\n\n  componentDidMount() {\n    const { filter } = this.state;\n    const { onFiltrate, onGetItemsFromStorage } = this.props;\n    onFiltrate(filter);\n    const persistedContacts = localStorage.getItem('contacts');\n    if (persistedContacts) {\n      onGetItemsFromStorage(JSON.parse(persistedContacts));\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { filter } = this.state;\n    const { onFiltrate, items } = this.props;\n    if (prevProps.items !== items || prevState.filter !== filter) {\n      onFiltrate(filter);\n      localStorage.setItem('contacts', JSON.stringify(items));\n    }\n  }\n\n  setFilter = ({ target }) => {\n    this.setState({\n      filter: target.value,\n    });\n  };\n\n  render() {\n    const { contactExist } = this.props;\n\n    return (\n      <div className={styles.container}>\n        <Logo />\n        <CSSTransition\n          in={contactExist}\n          timeout={1000}\n          classNames={slideTransition}\n          unmountOnExit\n          onEntered={() => setTimeout(() => {}, 1000)}\n        >\n          <Notification />\n        </CSSTransition>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter onSetFilter={this.setFilter} />\n        <ContactListContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { connect } from 'react-redux';\nimport * as contactsActions from '../../redux/contacts/contactsActions';\nimport App from './App';\n\nconst mapDispatchToProps = dispatch => ({\n  onFiltrate: filter => dispatch(contactsActions.filtrateContacts({ filter })),\n  onGetItemsFromStorage: items =>\n    dispatch(contactsActions.getItemsFromLocalStorage({ items })),\n});\n\nconst mapStateToProps = store => ({\n  items: store.contacts.items,\n  contactExist: store.contacts.contactExist,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport AppContainer from './components/App/AppContainer';\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppContainer />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}